save
background
None
NULL
x = vector(mode = "list")
x[[1]] = 0
x
x[[2]] = 0
x
setwd()
setwd("~/xpht")
devtools::document()
devtools::load_all()
?extractBoundary
image <- imager::load.image("~/pht-R/simple-tests/images/pinched8.png")
extractBoundary(image)
devtools::load_all()
extractBoundary(image)
devtools::load_all()
extractBoundary(image)
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
extractBoundary(image)
devtools::document()
devtools::load_all()
?extractBoundary
img <- imager::load.image("~/pht-R/simple-tests/images/pinched8.png")
img
plot(img)
extractBoundary(img = img)
extractBoundary <- function(img,
background = 0,
saveOutput = FALSE,
outputDir  = NULL,
fName = NULL,
verbose = TRUE) {
if (saveOutput) {
if (!dir.exists(outputDir)) {
outputDir <- getwd()
}
if (is.null(fName)) {
fName <- readline(prompt="Please provide a filename for save: ")
}
outFile <- paste(outputDir, "/", fname, ".RDS", sep = "")
}
# Pad image
img <- imager::pad(img, nPix = 1, val = background)
imgMatrix <- componentLabelling(img, background, verbose)
if (any(imgMatrix > 1) || any(imgMatrix < 0)) {
stop("Image not binary. Pixel values must be either 0 or 1.")
}
boundary <- boundaryTrace(imgMatrix, verbose)
if (saveOutput) {
saveRDS(boundary, file = outFile)
} else {
return(boundary)
}
}
